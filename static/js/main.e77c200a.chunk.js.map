{"version":3,"sources":["sync/Sync.js","sync/useSync.js","App.js","reportWebVitals.js","index.js"],"names":["node","this","window","cache","event","dispatch","get","handler","options","e","detail","addEventListener","removeEventListener","params","type","n","name","p","data","Object","assign","CustomEvent","dispatchEvent","useSync","initial","eventName","undefined","sync","useState","setData","myHandler","eventData","useEffect","addListener","removeListener","Cells","props","cells","value","setValue","onChange","target","length","map","style","margin","display","children","App","setCells","padding","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e77c200a.chunk.js","sourcesContent":["/**\n * Sync - simplifies events for synchronizing state\n */\n\n let log = msg=>{}  // msg => {console.log(msg)}\nexport class Sync {\n    constructor(node) {\n        this.node = node || this.node || window;\n        this.cache = {};  // old events\n    }\n\n    //returns the last time this event was dispatched - even prior to your \"listener\"\n    get(event) {\n        return this.cache[event];\n    }\n\n    echo(event) {\n        this.dispatch(this.get(event));\n    }\n\n    addListener(event, handler, options) {\n        if (!event) return;\n\n        handler =\n            handler ||\n            function (e) {\n                return e ? e.detail : null;\n            };\n\n        this.node.addEventListener(event, handler, options);\n    }\n\n    removeListener(event, handler) {\n        if (event) {\n            this.node.removeEventListener(event, handler);\n        }\n    }\n\n    dispatch(event, params) {\n        if (!event) return;\n        if (!event.type) {\n            let e = event;\n            let n = e.event || e.name || e;\n            let p = e.params || e.data || params;\n            if (typeof p === 'object') {\n                p = Object.assign({}, e.params, e.data, params);\n            }\n            event = new CustomEvent(n, { detail: p });\n        }\n\n        //debugger;\n        log({Sync: 'dispatch', event});\n\n        this.node.dispatchEvent(event);\n        this.cache[event.type] = event;\n    }\n}\n\nexport default new Sync()\n","import { useEffect, useState } from 'react'\nimport sync from './Sync'\n\n// sync - synchronizes state variables in different components\n// kinda like shared memory, this hook enables two different state variables in different components to share the same value\nexport function useSync(name, initial, handler, options) {\n    const eventName = name || \"useSync\";\n\n    if (initial === undefined) {\n        const event = sync.get(eventName) || {}\n        initial = event.detail\n    }\n\n    const [data, setData] = useState(initial);\n\n    function myHandler(e) {\n        const { detail: eventData } = e;\n        setData(eventData);\n        handler && handler(eventData);\n    }\n\n    useEffect(() => {\n        data && sync.dispatch(eventName, data);\n        sync.addListener(eventName, myHandler, options);\n\n        return () => {\n            sync.removeListener(eventName, myHandler);\n        }\n\n    }, []);  //eslint-disable-line\n\n    function set(detail) {\n        setData(detail);\n        sync.dispatch(eventName, detail)\n    }\n\n    return [data, set];\n}\n\nexport default useSync;","import useSync from \"./sync/useSync\";\nimport { useState } from \"react\";\n\nconst Cells = (props = {}) => {\n  const cells = props.cells;\n  const [value, setValue] = useSync(cells.name);\n\n  const onChange = (e) => {\n    setValue(e.target.value)  // should probably debounce keystrokes if there are 100s of cells\n  };\n\n  if (cells.length)\n    return (\n      <div>\n        {cells.map((n) => {\n          return <Cells cells={n}></Cells>;\n        })}\n      </div>\n    );\n\n  if (!cells.name) return null;\n\n  return (\n    <fieldset style={{ margin: \"20px\", display: \"inline-block\" }}>\n      <label>\n        {cells.name} &nbsp;\n        <input type=\"text\" value={value} onChange={onChange}></input>\n      </label>\n      {cells.children && <Cells cells={cells.children} />}\n    </fieldset>\n  );\n};\n\nfunction App() {\n  const [cells, setCells] = useState([\n    {\n      name: \"A\",\n      children: [\n        { name: \"one\", children: [] },\n        { name: \"two\", children: [] },\n      ],\n    },\n    {\n      name: \"B\",\n      children: [\n        { name: \"one\", children: [] },\n        { name: \"two\", children: [] },\n      ],\n    },\n  ]);\n\n  const onMore = () => {\n    setCells([...cells, ...cells]);\n  };\n\n  return (\n    <div style={{ padding: \"20px\", margin: \"20px\" }}>\n      <h2>\n        This demonstrates useSync across multiple text inputs (A, B, one and\n        two) in multiple React components without Redux or Context\n      </h2>\n      <div>\n        Type something in each box, any box, and the matching inputs will be\n        synchronized\n      </div>\n      <Cells cells={cells} />\n      <button onClick={onMore}>more</button>\n      {cells.length > 2 && <div> {cells.length * 3} synchronized inputs </div>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}